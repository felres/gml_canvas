<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>queue=0;

count[0]=0;
interval[0]=0;
explosion[0]=0;
duration[0]=0;
timer[0]=0;
xs[0]=0;
ys[0]=0;
vx[0]=0;
vy[0]=0;
spread[0]=0;
creep[0]=0;

new_count[0]=0;
new_interval[0]=0;
new_explosion[0]=0;
new_duration[0]=0;
new_timer[0]=0;
new_xs[0]=0;
new_ys[0]=0;
new_vx[0]=0;
new_vy[0]=0;
new_spread[0]=0;
new_creep[0]=0;

frame=0;

req_explosion=0;
req_x=0;
req_y=0;
v_x=0;
v_y=0;

instance_queue=0;
instance_object[0]=noone;
instance_team[0]=0;
instance_angle[0]=0;
instance_x[0]=0;
instance_y[0]=0;


clear_delay=room_speed*60*3; // 3 minutes
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frame+=1;
if ( frame &gt; 1000 ) frame = 0;
/*if ( frame % 2 == 0 ) */{
 if ( queue &gt; 0 ) {
  var new_queue,i;
  new_queue=0;
  for ( i=0; i&lt;queue; i++ ) {
   if ( count[i] == 1 ) {
    req_explosion=explosion[i];
    req_x=xs[i];
    req_y=ys[i];
    v_x=vx[i];
    v_y=vy[i];
    event_user(0);
   } else {
    duration[i]-=1;
    if ( duration[i] &gt; 0 ) {
     timer[i]+=1;
     if ( timer[i] &gt; interval[i] ) {
      timer[i]=0;
      interval[i]+=creep[i];
      req_explosion=explosion[i];
      req_x=xs[i]+random(spread[i])-spread[i]/2;
      req_y=ys[i]+random(spread[i])-spread[i]/2;
      event_user(0);
      count[i]--;
     }
     if ( count[i] &gt; 0 ) {
      new_count[new_queue]=count[i];
      new_explosion[new_queue]=explosion[i];
      new_duration[new_queue]=duration[i];
      new_timer[new_queue]=timer[i];
      new_interval[new_queue]=interval[i];
      new_xs[new_queue]=xs[i];
      new_ys[new_queue]=ys[i];
      new_vx[new_queue]=vx[i];
      new_vy[new_queue]=vy[i];
      new_spread[new_queue]=spread[i];
      new_creep[new_queue]=creep[i];
      new_queue+=1;
     }
    }
   }
  }
  for ( i=0; i&lt;new_queue; i++ ) {
   count[i]=new_count[i];
   explosion[i]=new_explosion[i];
   duration[i]=new_duration[i];
   timer[i]=new_timer[i];
   interval[i]=new_interval[i];
   xs[i]=new_xs[i];
   ys[i]=new_ys[i];
   vx[i]=new_vx[i];
   vy[i]=new_vx[i];
   spread[i]=new_spread[i];
   creep[i]=new_creep[i];
  }
  queue=new_queue;
 }
 if ( instance_queue &gt; 0 ) {
  var i,created;
  for ( i=0; i&lt;instance_queue; i++ ) {
   show_message("i="+int(i));
   created=instance_create(instance_x[i],instance_y[i],instance_object[i]);
   created.team=instance_team[i];
   created.direction=instance_angle[i];
   created.image_angle=instance_angle[i];
  }
  instance_queue=0;
 }
}

event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Attempt to delete certain types of instances which are for effects only, to avoid clutter.
if ( clear_delay &lt;= 0 ) {
 instance_activate_object(FAF_SpinningExpandingFader);
 instance_activate_object(FAF_LegacyPuff);
 instance_activate_object(FAF_ExpandContractBurn);
 instance_activate_object(FAF_FadeFilm);
 var i,disposing,dispose;
 disposing=0;
 dispose[0]=noone;
 for ( i=0; i&lt;instance_count; i++ ) {
  var iid;
  iid=instance_id[i];
  if ( instance_exists(iid) ) {
   if ( dist2d(global.player.x,global.player.y,iid.x,iid.y) &gt; room_width ) {
    if ( iid.object_index == FAF_SpinningExpandingFader
     or iid.object_index == FAF_ExpandContractBurn
     or iid.object_index == FAF_FadeFilm
     or iid.object_index == FAF_LegacyPuff ) {
     dispose[disposing]=iid;
     disposing++;
    }
   }
  }
 }
 if ( debug_mode and disposing &gt; 0 ) {
  show_message("Disposing "+int(disposing)+" off-screen fafs");
 }
 for ( i=0; i&lt;disposing; i++ ) with ( dispose[i] ){instance_destroy();}
 clear_delay=room_speed*60*3;
} else {
 clear_delay-=1/room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var view;
view=0;

// Deactivate instances outside the view
// Source: http://wiki.yoyogames.com/index.php/GML_Functions:_Deactivating_Instances
 {
   instance_deactivate_all(true);
   instance_activate_region(
    view_xview[view]-room_width,
    view_yview[view]-room_height,
    view_wview[view]+room_width*2,
    view_hview[view]+room_height*2,
    true
   );
   // Stuff we need to always exist..
   instance_activate_object(o_bg_stars);
   instance_activate_object(o_global);
   instance_activate_object(o_use_ship_computer);
   instance_activate_object(o_shipfx_manager);
   //instance_activate_object(o_explosion_manager);
 }
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( req_explosion == 0 ) {
 o=g_explosion(
  req_x,req_y,
  s_huge_explosion,
  c_white,0.5,4.0);
 o.ex=x;
 o.ey=y;
 audio_play_sound(sfx_kaboom,100,0);
} else if ( req_explosion == 1 ) {
 o=g_explosion(
  req_x,req_y,
  s_shockwave_explosion,
  c_white,1.0,1.0);
 audio_play_sound(sfx_boom_poppy,100,0);
} else if ( req_explosion == 2 ) {
 o=g_explosion(
  req_x,req_y,
  s_colossal_explosion,
  c_white,0.5,4.0);
 o.ex=x;
 o.ey=y;
 audio_play_sound(sfx_kaboom,100,0);
} else if ( req_explosion == 3 ) {
 o=g_explosion(
  req_x,req_y,
  s_planetary_explosion,
  c_white,0.5,4.0);
 o.ex=x;
 o.ey=y;
 audio_play_sound(sfx_kaboom,100,0);
} else if ( req_explosion == 4 ) { // Smoke Stream
 o=g_moving_explosion(
  req_x,req_y,
  s_smokestream,
  c_white,1.0,0.01
 );
 o.direction=random(360);
 o.velocity_x=v_x;
 o.velocity_y=v_y;
 o.ex=x;
 o.ey=y;
} else if ( req_explosion == 5 ) { // black smoke
 o=g_moving_explosion(
  req_x,req_y,
  s_smokestream,
  c_white,1.0,0.05
 );
 o.direction=random(360);
 o.velocity_x=v_x;
 o.velocity_y=v_y;
 o.ex=x;
 o.ey=y;
 o.color=c_black;
} else if ( req_explosion == 6 ) { // lightning "overloading" for ships
 r=random(100);
 if ( r &lt; 33 )
 o=g_moving_explosion(
  req_x,req_y,
  s_lightningburst,
  c_white,1.0,0.05
 );
 else if ( r &lt; 66 ) {
  o=g_moving_explosion(
   req_x,req_y,
   s_electrodischarge,
   c_white,1.0,random(1)*0.3
  );
 } else {
  o=g_moving_explosion(
   req_x,req_y,
   s_lightningbolt,
   c_white,1.0,random(1)*0.15
  );
 }
 o.direction=random(360);
 o.velocity_x=v_x;
 o.velocity_y=v_y;
 o.ex=x;
 o.ey=y;
} else if ( req_explosion == 7 ) { // ice steam
  o=g_moving_explosion(
   req_x,req_y,
   s_electrosparks,
   c_white,1.0,0.05
  );
 o.direction=random(360);
 o.velocity_x=v_x;
 o.velocity_y=v_y;
 o.ex=x;
 o.ey=y;
} else if ( req_explosion == 8 ) { // acid
  o=g_moving_explosion(
   req_x,req_y,
   s_electrosparks,
   c_lime,1.0,0.05
  );
 o.direction=random(360);
 o.velocity_x=v_x;
 o.velocity_y=v_y;
 o.ex=x;
 o.ey=y;
} else if ( req_explosion == 9 ) { // radiation
  o=g_moving_explosion(
   req_x,req_y,
   s_atomix,
   color_fuzzy(200,255,223,255,200,255),1.0,1.0
  );
 o.direction=random(360);
 o.velocity_x=v_x;
 o.velocity_y=v_y;
 o.ex=x;
 o.ey=y;
} else if ( req_explosion == 10 ) {
  o=g_moving_explosion(
   req_x,req_y,
   s_explosion,
   color_fuzzy(127,255,127,255,127,255),
   0.75,1.0
  );
 o.direction=random(360);
 o.velocity_x=v_x;
 o.velocity_y=v_y;
 o.ex=x;
 o.ey=y;
} else if ( req_explosion == 11 ) {
 o=g_moving_explosion(
  req_x,req_y,
  s_smokestream,
  color_fuzzy(0,255,240,255,127,255),
  1.0,0.2
 );
 o.scaledelta=0;
 o.direction=random(360);
 o.velocity_x=v_x;
 o.velocity_y=v_y;
 o.ex=x;
 o.ey=y;
} else if ( req_explosion == 12 ) { // massive, slow explosion
 o=g_explosion(
  req_x,req_y,
  s_hugeexplosion,
  c_white,1.0,4.0); 
} else if ( req_explosion == 13 ) {
} else if ( req_explosion == 14 ) {
} else if ( req_explosion == 15 ) {
} else if ( req_explosion == 16 ) {
} else if ( req_explosion == 17 ) {
} else if ( req_explosion == 18 ) {
} else if ( req_explosion == 19 ) {
} else if ( req_explosion == 20 ) {
} else if ( req_explosion == 21 ) {
} else if ( req_explosion == 22 ) {
} else if ( req_explosion == 23 ) {
} else if ( req_explosion == 24 ) {
} else if ( req_explosion == 25 ) {
} else if ( req_explosion == 26 ) {
} else if ( req_explosion == 27 ) {
} else if ( req_explosion == 28 ) {
} else if ( req_explosion == 29 ) {
} else if ( req_explosion == 30 ) {
}

//show_message(
//  "Explosion Manager: Created explosion "
// +int(req_explosion)
// +" at "
// +int(req_x)+","+int(req_y)
//);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
