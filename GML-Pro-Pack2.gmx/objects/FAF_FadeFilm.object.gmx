<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite=noone;
dx=0;
dy=0;
in=34;
out=79;
delay=0.0;
durationIn=1.0;
durationOut=2.0;
duration=3.0;
expired=0.0;
alpha=0.0;
smallScale=0.0;
bigScale=1.0;
scaleFollowsDuration=true; // when false, scale follows alpha
tint=c_white; color=c_white;
blend=bm_normal;
sub=0;
rotation=random(360);

// internals
size=0.0;
scale=1.0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( delay &lt;= 0.0 ) {
 x+=dx;
 y+=dy;
 expired+=1/room_speed;
 if ( expired &gt;= duration ) {
  instance_destroy();
 } else if ( expired &lt; durationIn ) {
  alpha=tween(in,expired/durationIn);
  size=alpha;
 } else if ( expired &lt; durationOut ) {
  var i,o;
  i=tween(in,0.999999);
  o=tween(out,0.0);
  alpha=lerp(i,o,(expired-durationIn)/(duration-durationIn));
  size=alpha;
 } else {
  alpha=tween(out,(expired-durationOut)/(duration-durationOut));
  size=alpha;
 }
 if ( scaleFollowsDuration ) size=lerp(smallScale,bigScale,expired/duration);
 else size=lerp(smallScale,bigScale,size);
 size*=scale;
 sub=1+sprite_get_number(sprite)*(expired/duration);
 if ( blend == bm_normal ) {
  color=tint;
 } else if ( blend == bm_add ) {
  color=ScaleByAlpha(tint,alpha);
 }
} else delay-=1/room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_blend_mode(blend);
draw_sprite_ext(sprite,sub,x,y,size,size,rotation,color,alpha);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
