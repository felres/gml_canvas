<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time=0.0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time+=1/room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Image Processing (2D)

draw_set_color(c_white);
draw_set_alpha(1);
draw_set_font(font_tiny);

// Alpha

shader_AlphaAvgThreshold(sprite_get_texture(s_test_pattern,0),0.5,0.5,0.5,0.5);
draw_sprite_ext(s_test_pattern,6,10,60,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(10,60,"AlphaAvgThresh");

shader_AlphaAvg(sprite_get_texture(s_test_pattern,3));
draw_sprite_ext(s_test_pattern,6,80,60,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(80,60,"AlphaAvg");

shader_Alpha0(
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,2)
);
draw_sprite_ext(s_test_pattern,6,160,60,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(160,60,"Alpha0");


shader_AlphaInv(
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,2)
);
draw_sprite_ext(s_test_pattern,6,240,60,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(240,60,"AlphaInv");

shader_MaskAlpha(
 sprite_get_texture(s_test_pattern,1),
 sprite_get_texture(s_test_pattern,2)
);
draw_sprite_ext(s_test_pattern,6,320,60,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(320,60,"MaskAlpha");

shader_MultiplyAlpha(
 sprite_get_texture(s_test_pattern,1),
 sprite_get_texture(s_test_pattern,2)
);
draw_sprite_ext(s_test_pattern,6,400,60,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(400,60,"MultiplyAlpha");

// Bend

shader_Bend(
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,8)
);
draw_sprite_ext(s_test_pattern,6,10,160,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(10,160,"Bend");

shader_BendR(
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,0)
);
draw_sprite_ext(s_test_pattern,6,80,160,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(80,160,"BendR");

shader_BendG(
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,0)
);
draw_sprite_ext(s_test_pattern,6,160,160,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(160,160,"BendG");

shader_BendB(
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,0)
);
draw_sprite_ext(s_test_pattern,6,240,160,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(240,160,"BendB");

shader_BendRG(
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,0)
);
draw_sprite_ext(s_test_pattern,6,320,160,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(320,160,"BendRG");

shader_BendRB(
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,0)
);
draw_sprite_ext(s_test_pattern,6,400,160,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(400,160,"BendRB");

shader_BendGB(
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,0)
);
draw_sprite_ext(s_test_pattern,6,480,160,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(480,160,"BendGB");

// Blend

shader_3Add(
 sprite_get_texture(s_test_pattern,0),
 sprite_get_texture(s_test_pattern,1),
 sprite_get_texture(s_test_pattern,2),
 sprite_get_texture(s_test_pattern,3)
);
draw_sprite_ext(s_test_pattern,6,10,240,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(10,240,"3Add");

shader_3Avg(
 sprite_get_texture(s_test_pattern,0),
 sprite_get_texture(s_test_pattern,1),
 sprite_get_texture(s_test_pattern,2),
 sprite_get_texture(s_test_pattern,3)
);
draw_sprite_ext(s_test_pattern,6,80,240,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(80,240,"3Avg");


// Blur

shader_Pulse(
 sprite_get_texture(s_test_pattern,6),
 time,
 1,1,
 1,1,
 mouse_x/room_width-0.5, mouse_y/room_height-0.5
);
draw_sprite_ext(s_test_pattern,6,10,320,1.0,1.0,1,c_white,1);
shader_reset();
draw_text(10,320,"Pulse");

shader_DreamBlur(
 sprite_get_texture(s_test_pattern,6)
);
draw_sprite_ext(s_test_pattern,6,80,320,1,1,0,c_red,1);
shader_reset();
draw_text(80,320,"DreamBlur");

shader_DreamBlurRGB(
 sprite_get_texture(s_test_pattern,6),
 0.001,  0.003,  0.005,  0.007,  0.009,  0.011,
 3.0,
 3.25,4.25
);
draw_sprite_ext(s_test_pattern,6,160,320,1,1,0,c_red,1);
shader_reset();
draw_text(160,320,"DreamBlurRGB");

shader_Radial(
 sprite_get_texture(s_test_pattern,6),
 time,
 mouse_x/room_width,mouse_y/room_height,
 0,0,
 512,512,
 512,512
);
draw_sprite_ext(s_test_pattern,6,240,320,1,1,0,c_white,1);
shader_reset();
draw_text(240,320,"Radial");

shader_Ripple(
 sprite_get_texture(s_test_pattern,6),
 time,
 12.0,
 512,512
);
draw_sprite_ext(s_test_pattern,6,320,320,1,1,0,c_orange,1);
shader_reset();
draw_text(320,320,"Ripple");

shader_Gaussian(
 3.5,1/64
);
draw_sprite_ext(s_test_pattern,6,400,320,1,1,0,c_orange,1);
shader_reset();
draw_text(400,320,"Faux Gaussian");

// Color Threshold

shader_Above(
 sprite_get_texture(s_test_pattern,6),
 0.5,0.5,0.5,0.9,
 0.75,0.75,0.0,1.0
);
draw_sprite_ext(s_test_pattern,6,10,400,1,1,0,c_orange,1);
shader_reset();
draw_text(10,400,"Above");


shader_AboveB(
 sprite_get_texture(s_test_pattern,6),
 0.5,0.5,0.5,0.9,
);
draw_sprite_ext(s_test_pattern,6,80,400,1,1,0,c_orange,1);
shader_reset();
draw_text(80,400,"AboveB");

shader_AboveBelow(
 sprite_get_texture(s_test_pattern,6),
 0.5,0.5,0.5,0.9,
 1.0,0.5,0.5,0.9,
 1.0,0.5,1.0,0.9
);
draw_sprite_ext(s_test_pattern,6,80,400,1,1,0,c_orange,1);
shader_reset();
draw_text(80,400,"AboveBelow");

shader_Below(
 sprite_get_texture(s_test_pattern,6),
 0.5,0.5,0.5,0.9,
 0.75,0.75,0.0,1.0
);
draw_sprite_ext(s_test_pattern,6,160,400,1,1,0,c_orange,1);
shader_reset();
draw_text(160,400,"Below");

shader_BelowB(
 sprite_get_texture(s_test_pattern,6),
 0.5,0.5,0.5,0.9
);
draw_sprite_ext(s_test_pattern,6,240,400,1,1,0,c_orange,1);
shader_reset();
draw_text(240,400,"BelowB");

shader_BelowAB(
 sprite_get_texture(s_test_pattern,6),
 0.25,0.25,0.25,0.9,
 0.75,0.75,0.75,0.9
);
draw_sprite_ext(s_test_pattern,6,320,400,1,1,0,c_orange,1);
shader_reset();
draw_text(320,400,"BelowAB");

// Convolution

shader_Emboss(
 sprite_get_texture(s_test_pattern,6)
);
draw_sprite_ext(s_test_pattern,6,10,470,1,1,0,c_orange,1);
shader_reset();
draw_text(10,470,"Emboss");


shader_EmbossTint(
 sprite_get_texture(s_test_pattern,6)
);
draw_sprite_ext(s_test_pattern,6,80,470,1,1,0,c_orange,1);
shader_reset();
draw_text(80,470,"EmbossTint");

// Displacement Mapping

shader_HeightToNormal(
 sprite_get_texture(s_test_pattern,8),
 1.0,
 64.0,64.0
);
draw_sprite_ext(s_test_pattern,6,10,540,1,1,0,c_orange,1);
shader_reset();
draw_text(10,540,"HeightToNormal");

// Normal Mapping (2D)

global.gles_2dNormalMap_Light1_position[0]=mouse_x/room_width;
global.gles_2dNormalMap_Light1_position[1]=mouse_y/room_height;
global.gles_2dNormalMap_Light1_position[3]=(1.0+sin(time))/2.0;

shader_2dNormalMap_1L(
 sprite_get_texture(s_normalmap_test,1)
);
draw_sprite_ext(s_normalmap_test,0,700,160,1,1,0,c_orange,1);
shader_reset();
draw_text(700,160,"2d NMap 1 Light");

// Distortion

// Barrel (Appears in o_shadertest2)

shader_Bloom(
 sprite_get_texture(s_test_pattern,0),
 0.0004,
 0.012,
 0.009,
 0.0075,
 0.3, 0.5, 0.25
);
draw_sprite_ext(s_test_pattern,0,10,610,1,1,0,c_orange,1);
shader_reset();
draw_text(10,610,"Bloom");

shader_Deformer(
 sprite_get_texture(s_test_pattern,2),
 sprite_get_texture(s_test_pattern,3),
 sin(pi*time),
 0.7,1.0,0.0, // rgb
 (mouse_x/room_width),
 (mouse_y/room_height),
 0.1,0.1,
 0.5,0.5,
 64,64,
 64,64
);
draw_sprite_ext(s_test_pattern,0,80,610,1,1,0,c_orange,1);
shader_reset();
draw_text(80,610,"Deformer");

shader_Frosted(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,9),
 0.115,
 64,64,
 2,2
);
draw_sprite_ext(s_test_pattern,6,160,610,1,1,0,c_orange,1);
shader_reset();
draw_text(160,610,"Frosted");


shader_Frosted2(
 sprite_get_texture(s_test_pattern,6),
 0.5,
 5.1,
 92.0, 80.0,
 41.0, 62.0
);
draw_sprite_ext(s_test_pattern,6,240,610,1,1,0,c_orange,1);
shader_reset();
draw_text(240,610,"Frosted2");

shader_Implode(
 sprite_get_texture(s_test_pattern,6)
);
draw_sprite_ext(s_test_pattern,6,320,610,1,1,0,c_orange,1);
shader_reset();
draw_text(320,610,"Implode");

shader_Motion(
 sprite_get_texture(s_test_pattern,0),
 sprite_get_texture(s_test_pattern,6),
 sin(pi*time),
 mouse_x/room_width,mouse_y/room_height,
 1,1,
 1,1
);
draw_sprite_ext(s_test_pattern,0,320,760,1,1,0,c_orange,1);
shader_reset();
draw_text(320,760,"Motion");

shader_Shockwave(
 sprite_get_texture(s_test_pattern,6),
 (1+sin(pi*time))/2,
 0.5,0.5,
 10,0.8,0.1
);
draw_sprite_ext(s_test_pattern,6,400,610,1,1,0,c_orange,1);
shader_reset();
draw_text(400,610,"Shockwave");

shader_SniperLens(
 sprite_get_texture(s_test_pattern,6),
 0.45,0.38
);
draw_sprite_ext(s_test_pattern,6,470,610,1,1,0,c_orange,1);
shader_reset();
draw_text(470,610,"SniperLens");

shader_Cubic(
 sprite_get_texture(s_test_pattern,0),
 64,64,
 mouse_x/room_width,mouse_y/room_height, // default: 0.5,0.5, (center)
 1.0,1.0,
 0.2,
 0.3,
 0.01,
 0.9,0.6,0.3,
 0.85
);
draw_sprite_ext(s_test_pattern,6,540,610,1,1,0,c_orange,1);
shader_reset();
draw_text(540,610,"Cubic Distort");

shader_Swirl(
 sprite_get_texture(s_test_pattern,5),
 time,
 sprite_get_width(s_test_pattern), sprite_get_height(s_test_pattern),
 2.0,
 radtodeg(time*pi/4),
 64.0*(mouse_x/room_width),
 64.0*(mouse_y/room_height)
);
draw_sprite_ext(s_test_pattern,6,620,610,1,1,0,c_orange,1);
shader_reset();
draw_text(620,610,"Swirl");

shader_Vortex(
 sprite_get_texture(s_test_pattern,5),
 time,
 1.0,1.0,
 32.0-64.0*(mouse_x/room_width), 32.0-64.0*(mouse_y/room_height) 
);
draw_sprite_ext(s_test_pattern,6,700,610,1,1,0,c_orange,1);
shader_reset();
draw_text(700,610,"Vortex");

shader_Wave(
 time*10,
 0.05, 0.1,
 10.0, 5.0
);
draw_sprite_ext(s_test_pattern,6,770,610,1,1,0,c_orange,1);
shader_reset();
draw_text(770,610,"Wave");

shader_Waving(
 time,
 0.3,
 1.5
);
draw_sprite_ext(s_test_pattern,6,840,610,1,1,0,c_orange,1);
shader_reset();
draw_text(840,610,"Waving");

// Fractal

shader_FBM(
 time*0.001,
 3.5,
 room_width,room_height,
 mouse_x,mouse_y,
 6.0,15.0,10.0,
 41.0
);
draw_sprite_ext(s_test_pattern,6,10,680,1,1,0,c_orange,1);
shader_reset();
draw_text(10,680,"FBM");

shader_Clod(
 time,
 mouse_x/room_width,mouse_y/room_height,
 1.0,1.0,
 0.1,0.5,0.1
);
draw_sprite_ext(s_test_pattern,6,80,680,1,1,0,c_orange,1);
shader_reset();
draw_text(80,680,"Clod");

shader_Flying(
 sprite_get_texture(s_test_pattern,5),
 time,
 mouse_x/room_width,mouse_y/room_height,
 1.0,1.0,
 1.0,1.0
);
draw_sprite_ext(s_test_pattern,6,160,680,1,1,0,c_orange,1);
shader_reset();
draw_text(160,680,"Flying");

shader_GlassCave(
 time,
 1024.0*mouse_x/room_width, 1024.0*mouse_y/room_height,
 1024.0,1024.0,
 1024.0,1024.0
);
draw_sprite_ext(s_test_pattern,6,240,680,1,1,0,c_orange,1);
shader_reset();
draw_text(240,680,"GlassCave");


shader_Monjori(
 time,
 128.0*mouse_x/room_width,128.0*mouse_y/room_height,
 512.0,512.0,
 512.0,512.0,
  1.6, 2.0,  1.0,
  1.3, 2.0,  1.0,
 13.0, 8.0, 18.0
);
draw_sprite_ext(s_test_pattern,6,320,680,1,1,0,c_orange,1);
shader_reset();
draw_text(320,680,"Monjori");

shader_Nautilus(
 time,
 64.0*mouse_x/room_width,64.0*mouse_y/room_height,
 64.0,64.0,
 64.0,64.0,
 64.0*mouse_x/room_width,64.0*mouse_y/room_height 
);
draw_sprite_ext(s_test_pattern,6,400,680,1,1,0,c_orange,1);
shader_reset();
draw_text(400,680,"Nautilus");

shader_Plasma(
 time,
 mouse_x/room_width,mouse_y/room_height,
 1.0,1.0,
 1.0,1.0,
 0.125,0.125,
 1000.0,100.0,40.0,2.0,
 3.0,2.0 
);
draw_sprite_ext(s_test_pattern,6,470,680,1,1,0,c_orange,1);
shader_reset();
draw_text(470,680,"Plasma");

shader_Tunnel(
 sprite_get_texture(s_test_pattern,5),
 sin(pi*time),
 64.0*mouse_x/room_width, 64.0*mouse_y/room_height,
 64.0,64.0,
 64.0,64.0
); 
draw_sprite_ext(s_test_pattern,6,540,680,1,1,0,c_orange,1);
shader_reset();
draw_text(540,680,"Tunnel");


shader_Tunnel2(
 sprite_get_texture(s_test_pattern,5),
 sin(pi*time),
 64.0*mouse_x/room_width, 64.0*mouse_y/room_height,
 64.0,64.0,
 64.0,64.0
); 
draw_sprite_ext(s_test_pattern,6,620,680,1,1,0,c_orange,1);
shader_reset();
draw_text(620,680,"Tunnel2");

// Texture Combiners

shader_2Way(
 sprite_get_texture(s_test_pattern,0),
 sprite_get_texture(s_test_pattern,1),
 sprite_get_texture(s_test_pattern,2)
);
draw_sprite_ext(s_test_pattern,6,800,10,1,1,0,c_orange,1);
shader_reset();
draw_text(800,10,"2-Way Combiner");

shader_3Way(
 sprite_get_texture(s_test_pattern,0),
 sprite_get_texture(s_test_pattern,1),
 sprite_get_texture(s_test_pattern,2),
 sprite_get_texture(s_test_pattern,3)
);
draw_sprite_ext(s_test_pattern,6,800,80,1,1,0,c_orange,1);
shader_reset();
draw_text(800,80,"3-Way");

shader_4Way(
 sprite_get_texture(s_test_pattern,0),
 sprite_get_texture(s_test_pattern,1),
 sprite_get_texture(s_test_pattern,2),
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,4)
);
draw_sprite_ext(s_test_pattern,6,800,160,1,1,0,c_orange,1);
shader_reset();
draw_text(800,160,"4-Way");

shader_5Way(
 sprite_get_texture(s_test_pattern,0),
 sprite_get_texture(s_test_pattern,1),
 sprite_get_texture(s_test_pattern,2),
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,4),
 sprite_get_texture(s_test_pattern,5)
);
draw_sprite_ext(s_test_pattern,6,800,240,1,1,0,c_orange,1);
shader_reset();
draw_text(800,240,"5-Way");

shader_6Way(
 sprite_get_texture(s_test_pattern,0),
 sprite_get_texture(s_test_pattern,1),
 sprite_get_texture(s_test_pattern,2),
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,4),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,6)
);
draw_sprite_ext(s_test_pattern,6,800,320,1,1,0,c_orange,1);
shader_reset();
draw_text(800,320,"6-Way");

shader_7Way(
 sprite_get_texture(s_test_pattern,0),
 sprite_get_texture(s_test_pattern,1),
 sprite_get_texture(s_test_pattern,2),
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,4),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,7)
);
draw_sprite_ext(s_test_pattern,6,800,400,1,1,0,c_orange,1);
shader_reset();
draw_text(800,400,"7-Way");

shader_8Way(
 sprite_get_texture(s_test_pattern,0),
 sprite_get_texture(s_test_pattern,1),
 sprite_get_texture(s_test_pattern,2),
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,4),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,7),
 sprite_get_texture(s_test_pattern,8)
);
draw_sprite_ext(s_test_pattern,6,800,480,1,1,0,c_orange,1);
shader_reset();
draw_text(800,480,"8-Way");

// Texture Layering

shader_LayerCombiner(
 time
);
draw_sprite_ext(s_test_pattern,6,700,80,1,1,0,c_orange,1);
shader_reset();
draw_text(700,80,"Layer Combiner");

// Shadows (Appears in o_shadertest2)

// Stencil (Appears in o_shadertest2)

// Stylize (Appears in o_shadertest2)

// Pixelate
shader_Pixelate(
 sprite_get_texture(s_test_pattern,6),
 64.0,64.0,
 1.5,1.5
);
draw_sprite_ext(s_test_pattern,6,80,540,1,1,0,c_orange,1);
shader_reset();
draw_text(80,540,"Pixelate");

shader_Crosshatch(
 sprite_get_texture(s_test_pattern,6),
 64.0,64.0,
 5.0,
 1.0, 0.7, 0.5, 0.3
);
draw_sprite_ext(s_test_pattern,6,160,540,1,1,0,c_orange,1);
shader_reset();
draw_set_color(c_black);
draw_text(160,540,"Crosshatch");
draw_set_color(c_white);

shader_Gamma(
 sprite_get_texture(s_test_pattern,6),
 1.0*(mouse_x/room_width)
);
draw_sprite_ext(s_test_pattern,6,240,540,1,1,0,c_orange,1);
shader_reset();
draw_text(240,540,"Gamma");

shader_Nightvision(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,7),
 sprite_get_texture(s_test_pattern,1),
 time,
 0.2,
 0.4,
 0.1, 0.95, 0.2
);
draw_sprite_ext(s_test_pattern,6,320,540,1,1,0,c_orange,1);
shader_reset();
draw_text(320,540,"Nightvision");

shader_SimpleFrost(
 sprite_get_texture(s_test_pattern,6),
 92.0,80.0,
 41.0,62.0,
 5.1,
 1.0,
 0.0,0.0
);
draw_sprite_ext(s_test_pattern,6,400,540,1,1,0,c_orange,1);
shader_reset();
draw_text(400,540,"SimpleFrost");

shader_Thermal(
 sprite_get_texture(s_test_pattern,6),
 0.0,0.0,1.0,
 1.0,1.0,0.0,
 1.0,0.0,0.0
);
draw_sprite_ext(s_test_pattern,6,480,540,1,1,0,c_orange,1);
shader_reset();
draw_text(480,540,"Thermal");

shader_TV(
 sprite_get_texture(s_test_pattern,6),
 time*10.0,
 0.5,0.5,
 1.0,1.0,
 1.0,1.0,
 64.0 // width/height (square)
);
draw_sprite_ext(s_test_pattern,6,560,540,1,1,0,c_orange,1);
shader_reset();
draw_text(560,540,"TV");

shader_TV2(
 time*10.0
);
draw_sprite_ext(s_test_pattern,6,630,540,1,1,0,c_orange,1);
shader_reset();
draw_text(630,540,"TV2");

shader_Grainy(
 time,
 0.82,0.46,0.05,0.0, // Sepia (brown.. supposedly like 'old film')
 0.6, // overall strength of color
 random(1.0),  // when under 1.0, scratches appear
 0.4, // noise density
 0.6  // scratch density
);
draw_sprite_ext(s_test_pattern,6,700,540,1,1,0,c_orange,1);
shader_reset();
draw_text(700,540,"Grainy");


shader_Grainy2(
 time,
 0.82,0.46,0.05,0.0, // Sepia (brown.. supposedly like 'old film')
 0.6, // overall strength of color
 random(2.0),  // when under 1.0, scratches appear
 0.4, // noise density
 0.6  // scratch density
);
draw_sprite_ext(s_test_pattern,6,770,540,1,1,0,c_orange,1);
shader_reset();
draw_text(770,540,"Grainy2");

shader_Luminance();
draw_sprite_ext(s_test_pattern,6,840,540,1,1,0,c_orange,1);
shader_reset();
draw_text(840,540,"Luminance");

shader_Tone(
);
draw_sprite_ext(s_test_pattern,6,910,540,1,1,0,c_orange,1);
shader_reset();
draw_text(910,540,"Tone");

// Stencil

shader_Stencil(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,5)
);
draw_sprite_ext(s_test_pattern,6,980,10,1,1,0,c_orange,1);
shader_reset();
draw_text(980,10,"Stencil");

shader_Stencil2(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,4)
);
draw_sprite_ext(s_test_pattern,6,980,80,1,1,0,c_orange,1);
shader_reset();
draw_text(980,80,"Stencil2");

shader_Stencil3(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,4),
 sprite_get_texture(s_test_pattern,3)
);
draw_sprite_ext(s_test_pattern,6,980,150,1,1,0,c_orange,1);
shader_reset();
draw_text(980,150,"Stencil3");

shader_Stencil4(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,4),
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,2)
);
draw_sprite_ext(s_test_pattern,6,980,220,1,1,0,c_orange,1);
shader_reset();
draw_text(980,220,"Stencil4");

shader_StencilAdd(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,5)
);
draw_sprite_ext(s_test_pattern,6,980,290,1,1,0,c_orange,1);
shader_reset();
draw_text(980,200,"StencilAdd");

shader_StencilAdd2(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,4)
);
draw_sprite_ext(s_test_pattern,6,980,360,1,1,0,c_orange,1);
shader_reset();
draw_text(980,360,"StencilAdd2");

shader_StencilAdd3(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,4),
 sprite_get_texture(s_test_pattern,3)
);
draw_sprite_ext(s_test_pattern,6,980,430,1,1,0,c_orange,1);
shader_reset();
draw_text(980,430,"StencilAdd3");

shader_StencilAdd4(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,4),
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,2)
);
draw_sprite_ext(s_test_pattern,6,980,500,1,1,0,c_orange,1);
shader_reset();
draw_text(980,500,"StencilAdd4");

shader_StencilAvg2(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,4)
);
draw_sprite_ext(s_test_pattern,6,980,570,1,1,0,c_orange,1);
shader_reset();
draw_text(980,570,"StencilAvg2");

shader_StencilAvg3(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,4),
 sprite_get_texture(s_test_pattern,3)
);
draw_sprite_ext(s_test_pattern,6,980,640,1,1,0,c_orange,1);
shader_reset();
draw_text(980,640,"StencilAvg3");

shader_StencilAvg4(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,4),
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,2)
);
draw_sprite_ext(s_test_pattern,6,980,710,1,1,0,c_orange,1);
shader_reset();
draw_text(980,710,"StencilAvg4");

shader_StencilMult2(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,4)
);
draw_sprite_ext(s_test_pattern,6,1050,10,1,1,0,c_orange,1);
shader_reset();
draw_text(1050,10,"StencilMult2");

shader_StencilMult3(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,4),
 sprite_get_texture(s_test_pattern,3)
);
draw_sprite_ext(s_test_pattern,6,1050,80,1,1,0,c_orange,1);
shader_reset();
draw_text(1050,80,"StencilMult3");

shader_StencilMult4(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,4),
 sprite_get_texture(s_test_pattern,3),
 sprite_get_texture(s_test_pattern,2)
);
draw_sprite_ext(s_test_pattern,6,1050,150,1,1,0,c_orange,1);
shader_reset();
draw_text(1050,150,"StencilMult4");

shader_StencilMult2Alpha(
 sprite_get_texture(s_test_pattern,6),
 sprite_get_texture(s_test_pattern,5),
 sprite_get_texture(s_test_pattern,4)
);
draw_sprite_ext(s_test_pattern,6,1050,220,1,1,0,c_orange,1);
shader_reset();
draw_text(1050,220,"StencilMult2Alpha");

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
