<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time=0.0;

 mousefactor_x=1;
 mousefactor_y=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time+=1/room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( keyboard_check_direct(vk_alt) ) {
 draw_set_color(c_black);
 draw_rectangle(0,0,room_width,room_height,false);
 draw_set_color(c_white);
}

if ( keyboard_check_direct(vk_control) ) {
 if ( keyboard_check_direct(vk_shift) ) {
  mousefactor_x=8;
  mousefactor_y=8;
 } else {
  mousefactor_x=2;
  mousefactor_y=2;
 }
} else {
 if ( keyboard_check_direct(vk_shift) ) {
  mousefactor_x=4;
  mousefactor_y=4;
 } else {
  mousefactor_x=1;
  mousefactor_y=1;
 }
}


// Image Processing (2D)


// Distortion

// Barrel Moved to v.95 below

shader_Bloom(
 sprite_get_texture(s_test_pattern,0),
 0.0004,
 0.012,
 0.009,
 0.0075,
 0.3, 0.5, 0.25
);
draw_sprite_ext(s_test_pattern,0,10,610,1,1,0,c_orange,1);
shader_reset();


// v .95 Hobbyist Underground Additions


shader_Barrel(
 sprite_get_texture(s_test_pattern,0),
 1,1,mouse_x/room_width,mouse_y/room_height,
// room_width,room_height,
// sprite_get_width(s_test_pattern),
// sprite_get_height(s_test_pattern),
 0.2
);
draw_sprite_ext(s_test_pattern,0,10,10,2,2,0,c_orange,1);
shader_reset();

shader_LayerCombiner(time);
draw_sprite_ext(s_test_pattern,0,138,10,2,2,0,c_orange,1);
shader_reset();

shader_Phosphor(
 sprite_get_texture(s_test_pattern,0),
 mousefactor_x*mouse_x/room_width*sprite_get_width(s_test_pattern),
 mousefactor_y*mouse_y/room_height*sprite_get_height(s_test_pattern)
);
draw_sprite_ext(s_test_pattern,0,138,138,2,2,0,c_orange,1);
shader_reset();

shader_HQ2X(
 sprite_get_texture(s_test_pattern,9),
 (room_width*1.0),
 (room_height*1.0)
// mouse_x/room_width*sprite_get_width(s_test_pattern)*4,
// mouse_y/room_height*sprite_get_height(s_test_pattern)*4
);
draw_sprite_ext(s_test_pattern,9,778,10,4,4,0,c_orange,1);
shader_reset();
draw_set_color(c_lime);
draw_text(778,20,"2X");

shader_HQ4X(
 sprite_get_texture(s_test_pattern,9),
 (room_width*1.0),
 (room_height*1.0)
// mouse_x/room_width*sprite_get_width(s_test_pattern)*4,/\
// mouse_y/room_height*sprite_get_height(s_test_pattern)*4
);
draw_sprite_ext(s_test_pattern,9,266,10,4,4,0,c_white,1);
shader_reset();
draw_set_color(c_lime);
draw_text(266,20,"4X");


shader_DotBloom(
 sprite_get_texture(s_test_pattern,9),
 mousefactor_x*mouse_x/room_width*sprite_get_width(s_test_pattern),
 mousefactor_y*mouse_y/room_height*sprite_get_height(s_test_pattern),
 sprite_get_width(s_test_pattern),sprite_get_height(s_test_pattern),
 sprite_get_width(s_test_pattern)*4,sprite_get_height(s_test_pattern)*4,
 2.4, // gamma
 0.5, // shine
 0.5 // blend
);
draw_sprite_ext(s_test_pattern,9,10,700,4,4,0,c_white,1);
shader_reset();

shader_Quilez(
 sprite_get_texture(s_test_pattern,2),
 mouse_x/room_width*sprite_get_width(s_test_pattern),
 mouse_y/room_height*sprite_get_height(s_test_pattern)
);
draw_sprite_ext(s_test_pattern,2,266,266,4,4,0,c_white,1);
shader_reset();

shader_4XBR(
 sprite_get_texture(s_test_pattern,9),
 (sprite_get_width(s_test_pattern)*1.0),
 (sprite_get_height(s_test_pattern)*1.0)
// (room_width*1.0),(room_height*1.0),
// mouse_x/room_width*sprite_get_width(s_test_pattern)*4,/\
// mouse_y/room_height*sprite_get_height(s_test_pattern)*4
);
draw_sprite_ext(s_test_pattern,9,522,522,4,4,0,c_white,1);
shader_reset();
draw_set_color(c_lime);
draw_text(522,532,"4XBR");

shader_HQ4X_2(
 sprite_get_texture(s_test_pattern,9),
 (sprite_get_width(s_test_pattern)*1.0),
 (sprite_get_height(s_test_pattern)*1.0)
// (room_width*1.0),(room_height*1.0),
// mouse_x/room_width*sprite_get_width(s_test_pattern)*4,/\
// mouse_y/room_height*sprite_get_height(s_test_pattern)*4
);
draw_sprite_ext(s_test_pattern,9,866,522,4,4,0,c_white,1);
shader_reset();
draw_set_color(c_lime);
draw_text(866,522,"4X_2");

shader_Waterpaint(
 sprite_get_texture(s_test_pattern,9),
 (sprite_get_width(s_test_pattern)*1.0),
 (sprite_get_height(s_test_pattern)*1.0),  
);
draw_sprite_ext(s_test_pattern,9,522,802,4,4,0,c_white,1);
shader_reset();
draw_set_color(c_lime);
draw_text(522,802,"Waterpaint");

shader_PipBoy(
 sprite_get_texture(s_test_pattern,9),
 (sprite_get_width(s_test_pattern)*1.0),
 (sprite_get_height(s_test_pattern)*1.0),  
 (sprite_get_width(s_test_pattern)*4.0),
 (sprite_get_height(s_test_pattern)*4.0),
 1.0, 0.2, 0.0, // orange
 time*mousefactor_x
);
draw_sprite_ext(s_test_pattern,9,866,802,4,4,0,c_white,1);
shader_reset();
draw_set_color(c_lime);
draw_text(866,802,"PipBoy");
 
//shader_Phosphorish(
// sprite_get_texture(s_test_pattern,9),
// (sprite_get_width(s_test_pattern)*1.0),
// (sprite_get_height(s_test_pattern)*1.0)
 // (room_width*1.0),(room_height*1.0),
 // mouse_x/room_width*sprite_get_width(s_test_pattern)*4,/\
 // mouse_y/room_height*sprite_get_height(s_test_pattern)*4
//);
//draw_sprite_ext(s_test_pattern,9,866,522,4,4,0,c_orange,1);
//shader_reset();
//draw_set_color(c_lime);
//draw_text(866,866,"ish");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
